#!/usr/bin/env python3

# Print items list
# $ xfiles
#
# Define list of items
# $ xfiles foo bar
#
# Add items to the list
# $ xfiles + baz qux
# $ echo 'baz\nqux' | xfiles +
#
# Remove items from the list
# $ xfiles - baz qux
# $ echo 'baz\nqux' | xfiles -
#
# Clear list
# $ xfiles --
#
# Print path to the list
# $ xfiles ++

import os
import sys
from pathlib import Path

def normalize_path(path):
    """Expand `~`, `.`, `..`, convert to absolute, do not resolve symlinks.
    Work also with non-existing paths.
    """
    # note that it works differently than:
    # Path().expanduser().absolute().as_posix()
    # e.g. from `~me/foo/../bar/somefile`
    # we would get: '/home/me/foo/../bar/somefile'
    # but we need '/home/me/bar/mysymlink'
    return Path(path).as_posix() |> os.path.expanduser |> os.path.abspath

def get_stdin_args():
    if sys.stdin.isatty():
        stdin_args = []
    else:
        stdin_args = sys.stdin.read().splitlines() |> filter$(None) |> list
    return stdin_args

class Selection():
    def __init__(self):
        storage = Path('/dev/shm')
        if not storage.is_dir():
            storage = Path('/tmp')
        self._path = storage / 'xfiles'

    def _read_items(self):
        try:
            text = self._path.read_text()
        except FileNotFoundError:
            text = ''
            self.clear()
        return text.splitlines()

    def _write_items(self, items):
        items |> '\n'.join |> self._path.write_text

    def show(self):
        if text := self._read_items() |> '\n'.join:
            text |> print

    def show_path(self):
        self._read_items()
        self._path |> print

    def add(self, items):
        old_items = self._read_items()
        all_items = old_items :: items |> filter$(None) |> map$(normalize_path)
        # remove duplicates
        unique_items = all_items |> map$(x -> (x, None)) |> dict |> .keys() |> list
        self._write_items(unique_items)

    def remove(self, items):
        old_items = self._read_items()
        abs_items = items |> map$(normalize_path) |> list
        all_items = old_items |> filter$(x -> x not in abs_items)
        self._write_items(all_items)

    def clear(self):
        self._path.touch()
        self._path.write_text('')

def main():
    selection = Selection()
    args = sys.argv[1:]
    stdin_args = get_stdin_args()

    if args:
        cmd = args[0]
        cmd_args = args[1:] or stdin_args

        case cmd:
            match '+':
                selection.add(cmd_args)
                selection.show()
            match  '-':
                selection.remove(cmd_args)
                selection.show()
            match '++':
                selection.show_path()
            match '--':
                selection.clear()
        else:
            selection.clear()
            selection.add(args)
            selection.show()
    else:
        if stdin_args:
            selection.clear()
            selection.add(stdin_args)
        selection.show()

if __name__ == '__main__':
    main()
